var documenterSearchIndex = {"docs":
[{"location":"gettingstarted/#Getting-Started","page":"Getting Started","title":"Getting Started","text":"","category":"section"},{"location":"api/#Reference","page":"API Reference","title":"Reference","text":"","category":"section"},{"location":"api/","page":"API Reference","title":"API Reference","text":"","category":"page"},{"location":"api/#Types","page":"API Reference","title":"Types","text":"","category":"section"},{"location":"api/","page":"API Reference","title":"API Reference","text":"Modules = [BondGraphs]\r\nOrder = [:type]","category":"page"},{"location":"api/#BondGraphs.Bond","page":"API Reference","title":"BondGraphs.Bond","text":"Bond(source::AbstractNode, destination::AbstractNode)\nBond(source::Port, destination::Port)\n\nConnect two bond graph components (or two ports of two components) with a bond. The bond direction is from source to destination. If the ports are not specified, the bond will be created between the next available ports in each component.\n\nIn most cases it is better to use connect! instead.\n\n\n\n\n\n","category":"type"},{"location":"api/#BondGraphs.BondGraph","page":"API Reference","title":"BondGraphs.BondGraph","text":"BondGraph(name=\"BG\") <: Graphs.AbstractGraph{Int64}\nBondGraph(name, nodes::Vector{AbstractNode}, bonds::Vector{Bond})\n\nThe bond graph object which contains a vector of nodes and bonds. All operations on components or bonds must happen within the same bond graph. This inherits the methods of the AbstractGraph type and so will work with\n\nSee also BondGraphNode.\n\n\n\n\n\n","category":"type"},{"location":"api/#BondGraphs.BondGraph-Tuple{Catalyst.ReactionSystem}","page":"API Reference","title":"BondGraphs.BondGraph","text":"BondGraph(rs::ReactionSystem; chemostats=[])\n\nConvert a Catalyst.ReactionSystem into a BondGraph.\n\nchemostats are chemical species with fixed concentrations. In bond graph terms, these are \"SCe\" types (chemical energy sources) instead of \"Ce\" types (chemical energy store).\n\n\n\n\n\n","category":"method"},{"location":"api/#BondGraphs.BondGraphNode","page":"API Reference","title":"BondGraphs.BondGraphNode","text":"BondGraphNode(bg::BondGraph, name=name(bg); deepcopy=false)\n\nConvert a BondGraph into a component that can be added in another level bond graph. Componets can be exposed to the outer bond graph by replacing them with a SourceSensor type using the swap! function.\n\nSee also BondGraph.\n\n\n\n\n\n","category":"type"},{"location":"api/#BondGraphs.Component","page":"API Reference","title":"BondGraphs.Component","text":"Component(type, name=type)\nComponent(type, name=type; library=BondGraphs.DEFAULT_LIBRARY, <keyword arguments>)\n\nConstruct a Component of a defined (bondgraph) type ∈ {R, C, I, Se, Sf, TF, Ce, Re, SCe}. Properties and equations of available componets are defined in BondGraphs.DEFAULT_LIBRARY.\n\n\n\n\n\n","category":"type"},{"location":"api/#BondGraphs.Component-2","page":"API Reference","title":"BondGraphs.Component","text":"Component{N} <: AbstractNode\nComponent(type, name=type)\nComponent(type, name=type; library=BondGraphs.DEFAULT_LIBRARY, <keyword arguments>)\n\nConstruct a Component of a defined (bondgraph) type ∈ {R, C, I, Se, Sf, TF, Ce, Re, SCe}.\n\nComponents have a N fixed ports when generated. This is usually determined by the bond graph type. Other properties and equations of available components are defined in BondGraphs.DEFAULT_LIBRARY (see  description).\n\n\n\n\n\n","category":"type"},{"location":"api/#BondGraphs.EqualEffort","page":"API Reference","title":"BondGraphs.EqualEffort","text":"EqualEffort <: Junction\n\nEfforts are all equal, flows sum to zero (0-junction).\n\n\n\n\n\n","category":"type"},{"location":"api/#BondGraphs.EqualFlow","page":"API Reference","title":"BondGraphs.EqualFlow","text":"EqualFlow <: Junction\n\nFlows are all equal, efforts sum to zero (1-junction).\n\n\n\n\n\n","category":"type"},{"location":"api/#BondGraphs.Port","page":"API Reference","title":"BondGraphs.Port","text":"Port(node::AbstractNode)\nPort(node::AbstractNode, index::Int)\n\nCreate a new Port for node. Ports have an index corresponding to the component's variables.\n\nPorts are the node elements that are connected by bonds. The port does not technically exist until this is called, even though a component has a fixed number of assigned ports when created.\n\nWARNING: connecting a bond to the wrong port may assign values to the wrong variables!\n\n\n\n\n\n","category":"type"},{"location":"api/#BondGraphs.SourceSensor","page":"API Reference","title":"BondGraphs.SourceSensor","text":"SourceSensor <: AbstractNode\n\nSpecial component type that acts as a source of both effort and flow.\n\n\n\n\n\n","category":"type"},{"location":"api/#Methods","page":"API Reference","title":"Methods","text":"","category":"section"},{"location":"api/","page":"API Reference","title":"API Reference","text":"Modules = [BondGraphs]\r\nOrder = [:function]","category":"page"},{"location":"api/#BondGraphs.add_node!-Tuple{BondGraph, Any}","page":"API Reference","title":"BondGraphs.add_node!","text":"add_node!(bg::BondGraph, nodes)\n\nAdd a node to a bond graph bg. Can add a single node or list of nodes.\n\n\n\n\n\n","category":"method"},{"location":"api/#BondGraphs.addlibrary!-Tuple{Any}","page":"API Reference","title":"BondGraphs.addlibrary!","text":"addlibrary!(newlib)\n\nCombine the library newlib with the default library used within BondGraphs. newlib will need to be in the form of a dictionary, and new components should follow the below schema.\n\nNOTE: This library is likely to change in the future. Do not rely on this schema too much.\n\nLibrary Schema\n\ndescription -> written description of the component and definitions\nnumports -> the number of ports in the component\nvariables ->\nparameters -> constant parameters, unique for each component instance\nglobals -> global parameters (i.e. no namespace)\nstates -> time-dependent state variables\ncontrols -> time-dependent parameters that can accept julia functions\nequations -> symbolic description of the constitutive equations\n\n\n\n\n\n","category":"method"},{"location":"api/#BondGraphs.connect!-Tuple{BondGraph, AbstractNode, AbstractNode}","page":"API Reference","title":"BondGraphs.connect!","text":"connect!(bg::BondGraph, srcnode, dstnode)\nconnect!(bg::BondGraph, srcnode, dstnode; srcportindex, dstportindex)\n\nConnect two components together in the same bond graph. The bond direction is always from srcnode to dstnode. The port index of srcnode and dstnode can be optionally set.\n\n\n\n\n\n","category":"method"},{"location":"api/#BondGraphs.constitutive_relations-Tuple{AbstractNode}","page":"API Reference","title":"BondGraphs.constitutive_relations","text":"constitutive_relations(n::AbstractNode)\n\nReturn the constitutive relations (equations) for node n.\n\nIf n is a Junction, the flow and effort constraints are generated from its connections.\n\n\n\n\n\n","category":"method"},{"location":"api/#BondGraphs.constitutive_relations-Tuple{BondGraph}","page":"API Reference","title":"BondGraphs.constitutive_relations","text":"constitutive_relations(bg::BondGraph; sub_defaults=false)\n\nGenerate the constitutive relations (equations) for bond graph bg.\n\nThe equations are symbolically derived from the equations of all the nodes and bonds in the bond graph. If sub_defaults is true, the default parameter values for each component are subbed into the equations.\n\nNOTE: This creates a ModelingToolkit.ODESystem of the bond graph and returns only the equations. If you want to numerically solve the bond graph equations, either use simulate or create an ODESystem directly.\n\n\n\n\n\n","category":"method"},{"location":"api/#BondGraphs.description-Tuple{Symbol}","page":"API Reference","title":"BondGraphs.description","text":"description(comp::Symbol)\ndescription(lib, comp::Symbol)\n\nPrint the description of the component with symbol comp in library lib.\n\n\n\n\n\n","category":"method"},{"location":"api/#BondGraphs.disconnect!-Tuple{BondGraph, AbstractNode, AbstractNode}","page":"API Reference","title":"BondGraphs.disconnect!","text":"disconnect!(bg::BondGraph, node1, node2)\n\nRemove the bond connecting node1 and node2. The order of nodes does not matter.\n\n\n\n\n\n","category":"method"},{"location":"api/#BondGraphs.getbonds-Tuple{BondGraph, Tuple}","page":"API Reference","title":"BondGraphs.getbonds","text":"getbonds(bg::BondGraph, n1::AbstractNode, n2::AbstractNode)\ngetbonds(bg::BondGraph, (n1, n2))\n\nReturn the bond in bg connecting nodes n1 and n2, if it exists.\n\n\n\n\n\n","category":"method"},{"location":"api/#BondGraphs.getnodes-Tuple{BondGraph, DataType}","page":"API Reference","title":"BondGraphs.getnodes","text":"getnodes(bg::BondGraph, type)\n\nReturn all nodes a particular bond graph type in the bond graph bg.\n\ntype can be a DataType (e.g. Component{1}), a string (e.g. \"C\"), or a vector of strings.\n\n\n\n\n\n","category":"method"},{"location":"api/#BondGraphs.insert_node!-Tuple{BondGraph, Bond, AbstractNode}","page":"API Reference","title":"BondGraphs.insert_node!","text":"insert_node!(bg::BondGraph, bond, newnode)\ninsert_node!(bg::BondGraph, (node1, node2), newnode)\n\nInserts newnode between two existing connected nodes. The direction of the original bond is preserved.\n\nSupply either the two nodes as a tuple, or the bond that connects them in bg.\n\n\n\n\n\n","category":"method"},{"location":"api/#BondGraphs.merge_nodes!-Tuple{BondGraph, AbstractNode, AbstractNode}","page":"API Reference","title":"BondGraphs.merge_nodes!","text":"merge_nodes!(bg::BondGraph, node1, node2; junction=EqualEffort())\n\nCombine two copies of the same component in bg by adding a junction and connecting the neighbours of node1 and node2 to the new junction.\n\nMerging nodes this way means there is only one component representing a system element, and all other nodes connect to the component via the new junction.\n\n\n\n\n\n","category":"method"},{"location":"api/#BondGraphs.remove_node!-Tuple{BondGraph, Any}","page":"API Reference","title":"BondGraphs.remove_node!","text":"remove_node!(bg::BondGraph, nodes)\n\nRemove a node to a bond graph bg. Can remove a single node or list of nodes.\n\n\n\n\n\n","category":"method"},{"location":"api/#BondGraphs.simplify_junctions!-Tuple{BondGraph}","page":"API Reference","title":"BondGraphs.simplify_junctions!","text":"simplify_junctions!(bg::BondGraph; remove_redundant=true, squash_identical=true)\n\nRemove unnecessary or redundant Junctions from bond graph bg.\n\nIf remove_redundant is true, junctions that have zero or one neighbours are removed, and junctions with two neighbours are squashed (connected components remain connected).\n\nIf squash_identical is true, connected junctions of the same type are squashed into a single junction.\n\n\n\n\n\n","category":"method"},{"location":"api/#BondGraphs.simulate-Tuple{BondGraph, Any}","page":"API Reference","title":"BondGraphs.simulate","text":"simulate(bg::BondGraph, tspan; u0=[], pmap=[], solver=Tsit5(), flag_ODE=true, kwargs...)\n\nSimulate the bond graph model.\n\nThe keyword arguments are the same as for ODEProblem and solve in DifferentialEquations.\n\n\n\n\n\n","category":"method"},{"location":"api/#BondGraphs.swap!-Tuple{BondGraph, AbstractNode, AbstractNode}","page":"API Reference","title":"BondGraphs.swap!","text":"swap!(bg::BondGraph, oldnode, newnode)\n\nRemove oldnode from bond graph bg and replace it with newnode. The new node will have the same connections (bonds) as the original model.\n\nnewnode must have a greater or equal number of ports as oldnode.\n\n\n\n\n\n","category":"method"},{"location":"examples/#Examples","page":"Examples","title":"Examples","text":"","category":"section"},{"location":"userguide/#User-Guide","page":"User Guide","title":"User Guide","text":"","category":"section"},{"location":"background/#Background","page":"Background","title":"Background","text":"","category":"section"},{"location":"background/","page":"Background","title":"Background","text":"Bond graphs are an energy-based modelling framework that describe the rate of energy flow moving through system components. By construction, bond graph models enforce physical and thermodynamic constraints, guaranteeing compatibility with other physical models. This framework has been applied to mechanical, electrical, chemical, and biological systems, and is even capable of modelling complex multi-physics systems.","category":"page"},{"location":"#Introduction","page":"Introduction","title":"Introduction","text":"","category":"section"},{"location":"#Overview","page":"Introduction","title":"Overview","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"BondGraphs.jl is a Julia implementation of the bond graph framework. This package constructs a symbolic graph model of a physical system, which can then be converted into a system of differential equations. ","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"Pages   = [\r\n    \"gettingstarted.md\",\r\n    \"examples.md\",\r\n    \"api.md\"\r\n]\r\nDepth = 1","category":"page"},{"location":"#Installation","page":"Introduction","title":"Installation","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"using Pkg; Pkg.add(url=\"https://github.com/jedforrest/BondGraphs.jl\")\r\nusing BondGraphs","category":"page"},{"location":"#Tutorials","page":"Introduction","title":"Tutorials","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"For tutorials and examples, refer to the Examples page. For interactive Jupyter Notebook tutorials, refer to BondGraphsTutorials on GitHub.","category":"page"}]
}
